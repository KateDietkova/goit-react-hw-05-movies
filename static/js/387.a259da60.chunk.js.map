{"version":3,"file":"static/js/387.a259da60.chunk.js","mappings":"iSAEaA,EAAcC,EAAAA,GAAAA,GAAH,4PAYXC,EAAWD,EAAAA,GAAAA,GAAH,0GAORE,EAAUF,EAAAA,GAAAA,IAAH,iIAQPG,EAAWH,EAAAA,GAAAA,EAAH,iE,SCsBrB,EA7Ca,WACX,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,IAfAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAO,mCAAG,8GAEOC,EAAAA,EAAAA,IAAYJ,GAFnB,OAENJ,EAFM,OAGZC,EAAQD,GACRG,GAAa,GAJD,gDAMZA,GAAa,GACbM,QAAQC,IAAI,gBAAZ,MAPY,yDAAH,qDAUbH,GACD,GAAE,CAACH,IAECJ,EAIL,OACE,iCACIE,GAAaF,EAAKW,OAAS,IAC3B,SAACjB,EAAD,UACGM,EAAKY,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,aAA7B,OACR,UAACpB,EAAD,YACE,SAACC,EAAD,CAASoB,KAAKC,EAAAA,EAAAA,IAAcF,GAAeG,IAAKL,KAChD,SAAChB,EAAD,UAAWgB,KACX,uCAAeC,OAHFF,EADP,MASbX,IAAa,SAACkB,EAAA,EAAD,IACG,IAAhBpB,EAAKW,SAAiBT,IACrB,6DAIP,C,kSC/CKmB,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAEaC,EAAW,mCAAG,WAAMnB,GAAN,kGAEAkB,EAAAA,EAAAA,IAAA,iBAAoBlB,EAApB,oBAAuCiB,IAFvC,cAEjBG,EAFiB,OAGjBC,EAAYD,EAASE,KAHJ,kBAIhBD,GAJgB,gCAMvBhB,QAAQC,IAAI,uBAAZ,MANuB,yDAAH,sDAUXiB,EAAgB,mCAAG,WAAMC,GAAN,kGAELN,EAAAA,EAAAA,IAAA,gCACID,EADJ,kBACqBO,IAHhB,cAEtBJ,EAFsB,OAKtBK,EAAcL,EAASE,KAAKI,QALN,kBAMrBD,GANqB,gCAQ5BpB,QAAQC,IAAI,4BAAZ,MAR4B,yDAAH,sDAYhBF,EAAW,mCAAG,WAAMJ,GAAN,kGAEAkB,EAAAA,EAAAA,IAAA,iBACXlB,EADW,4BACgBiB,IAHhB,cAEjBG,EAFiB,OAKjBxB,EAAOwB,EAASE,KAAK1B,KALJ,kBAMhBA,GANgB,gCAQvBS,QAAQC,IAAI,uBAAZ,MARuB,yDAAH,sDAYXqB,EAAc,mCAAG,WAAM3B,GAAN,kGAEHkB,EAAAA,EAAAA,IAAA,iBACXlB,EADW,4BACgBiB,IAHb,cAEpBG,EAFoB,OAKpBQ,EAAUR,EAASE,KAAKI,QALJ,kBAMnBE,GANmB,gCAQ1BvB,QAAQC,IAAI,0BAAZ,MAR0B,yDAAH,sDAYpB,SAASuB,EAAQC,GACtB,GAAIA,EAEF,OADaA,EAAKC,MAAM,KAAK,EAGhC,CAEM,SAASjB,EAAckB,GAC1B,OAAIA,EAAkB,GAAN,OAxDC,kCAwDD,YAA0BA,GACnC,kDACV,CAGM,SAASC,EAAUC,GACtB,GAAKA,EAIL,OADmBA,EAAO1B,KAAI,SAAA2B,GAAK,OAAIA,EAAMzB,IAAV,IACjB0B,KAAK,KAC1B,CAEM,SAASC,EAAiBC,GAE7B,OADyBC,WAAWD,EAAYE,QAAQ,GAE3D,CAEM,SAASC,EAAkBH,GAC9B,GAAKA,EAAL,CAGA,IAAMI,EAAYL,EAAiBC,GAEnC,MAAM,GAAN,OADgBI,EAAY,GAAK,IACjC,IAHC,CAIJ,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/fetchApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastGallery = styled.ul`\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 40px;\n  display: grid;\n  justify-content: center;\n  grid-auto-rows: auto;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 32px 22px;\n  max-width: 1200px;\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 7px;\n`;\n\nexport const CastImg = styled.img`\n  border-radius: 5px;\n  object-fit: cover;\n  object-position: top;\n  width: 385px;\n  height: 470px;\n`;\n\nexport const CastName = styled.p`\n  font-size: 18px;\n  font-weight: 700;\n`;\n","import { Loader } from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPosterFilm, getFilmCast } from 'services/fetchApi';\nimport { CastGallery, CastItem, CastImg, CastName } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getCast = async () => {\n      try {\n        const cast = await getFilmCast(movieId);\n        setCast(cast);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoading(false);\n        console.log('Error in Cast', error);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <>\n      {!isLoading && cast.length > 0 && (\n        <CastGallery>\n          {cast.map(({ cast_id, name, character, profile_path }) => (\n            <CastItem key={cast_id}>\n              <CastImg src={getPosterFilm(profile_path)} alt={name} />\n              <CastName>{name}</CastName>\n              <p>Character: {character}</p>\n            </CastItem>\n          ))}\n        </CastGallery>\n      )}\n      {isLoading && <Loader />}\n      {cast.length === 0 && !isLoading && (\n        <div>We didn't find any actors :( </div>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '579a7483bae7d6a5a25eb4c1ddded2cf';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getFilmById = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    const movieInfo = response.data;\n    return movieInfo;\n  } catch (error) {\n    console.log('Error in getFilmById', error);\n  }\n};\n\nexport const getFilmByKeyword = async movie => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${movie}`\n    );\n    const searchMovie = response.data.results;\n    return searchMovie;\n  } catch (error) {\n    console.log('Error in getFilmByKeyword', error);\n  }\n};\n\nexport const getFilmCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    const cast = response.data.cast;\n    return cast;\n  } catch (error) {\n    console.log('Error in getFilmCast', error);\n  }\n};\n\nexport const getFilmReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.log('Error in getFilmReviews', error);\n  }\n};\n\nexport function getDate(date) {\n  if (date) {\n    const year = date.split('-')[0];\n    return year;\n  }\n}\n\nexport function getPosterFilm(posterPath) {\n    if (posterPath) return `${BASE_IMG_URL}/${posterPath}`;\n    return 'https://www.jsconsulting.kz/assets/img/noImg.jpg';\n}\n\n\nexport function getGenres(genres) {\n    if (!genres) {\n      return;\n    }\n    const genresName = genres.map(genre => genre.name);\n    return genresName.join(\", \");\n}\n\nexport function sliceVoteAverage(voteAverage) {\n    const sliceVoteAverage = parseFloat(voteAverage.toFixed(1));\n    return sliceVoteAverage;\n}\n\nexport function getPecentageValue(voteAverage) {\n    if (!voteAverage) {\n        return;\n    }\n    const sliceVote = sliceVoteAverage(voteAverage);\n    const percent = sliceVote / 10 * 100;\n    return `${percent}%`;\n}\n"],"names":["CastGallery","styled","CastItem","CastImg","CastName","useState","cast","setCast","isLoading","setIsLoading","movieId","useParams","useEffect","getCast","getFilmCast","console","log","length","map","cast_id","name","character","profile_path","src","getPosterFilm","alt","Loader","API_KEY","axios","getFilmById","response","movieInfo","data","getFilmByKeyword","movie","searchMovie","results","getFilmReviews","reviews","getDate","date","split","posterPath","getGenres","genres","genre","join","sliceVoteAverage","voteAverage","parseFloat","toFixed","getPecentageValue","sliceVote"],"sourceRoot":""}