{"version":3,"file":"static/js/779.cb5718d5.chunk.js","mappings":"iSAGaA,EAAcC,EAAAA,GAAAA,GAAH,mFAMXC,EAAcD,EAAAA,GAAAA,GAAH,qNAQXE,EAAgBF,EAAAA,GAAAA,EAAH,qEAKbG,EAAiBH,EAAAA,GAAAA,EAAH,gD,SC4B3B,EAvCgB,WACd,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAiBA,IAfAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,GACb,IAAME,EAAU,mCAAG,8GAEOC,EAAAA,EAAAA,IAAeN,GAFtB,OAETF,EAFS,OAGfC,EAAWD,GACXK,GAAa,GAJE,gDAMfA,GAAa,GACbI,QAAQC,IAAI,mBAAZ,MAPe,yDAAH,qDAUhBH,GACD,GAAE,CAACL,IAECF,EAIL,OACE,iCACII,IAAa,SAACV,EAAD,UACZM,EAAQW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAAClB,EAAD,YACE,UAACC,EAAD,sBAAwBgB,MACxB,SAACf,EAAD,UAAiBgB,MAFDF,EADP,MAOdR,IAAa,SAACW,EAAA,EAAD,MAGnB,C,0QC9CKC,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAEaC,EAAW,mCAAG,WAAMhB,GAAN,kGAEAe,EAAAA,EAAAA,IAAA,iBAAoBf,EAApB,oBAAuCc,IAFvC,cAEjBG,EAFiB,OAGjBC,EAAYD,EAASE,KAC3BZ,QAAQC,IAAIS,EAASE,MAJE,kBAKhBD,GALgB,gCAOvBX,QAAQC,IAAI,uBAAZ,MAPuB,yDAAH,sDAWXY,EAAgB,mCAAG,WAAMC,GAAN,kGAELN,EAAAA,EAAAA,IAAA,gCACID,EADJ,kBACqBO,IAHhB,cAEtBJ,EAFsB,OAKtBK,EAAcL,EAASE,KAAKI,QAClChB,QAAQC,IAAI,sBAAuBS,EAASE,KAAKI,SANrB,kBAOrBD,GAPqB,gCAS5Bf,QAAQC,IAAI,4BAAZ,MAT4B,yDAAH,sDAahBgB,EAAW,mCAAG,WAAMxB,GAAN,kGAEAe,EAAAA,EAAAA,IAAA,iBACXf,EADW,4BACgBc,IAHhB,cAEjBG,EAFiB,OAKjBQ,EAAOR,EAASE,KAAKM,KALJ,kBAMhBA,GANgB,gCAQvBlB,QAAQC,IAAI,uBAAZ,MARuB,yDAAH,sDAYXF,EAAc,mCAAG,WAAMN,GAAN,kGAEHe,EAAAA,EAAAA,IAAA,iBACXf,EADW,4BACgBc,IAHb,cAEpBG,EAFoB,OAKpBnB,EAAUmB,EAASE,KAAKI,QALJ,kBAMnBzB,GANmB,gCAQ1BS,QAAQC,IAAI,0BAAZ,MAR0B,yDAAH,sDAYpB,SAASkB,EAAQC,GACtB,GAAIA,EAEF,OADaA,EAAKC,MAAM,KAAK,EAGhC,CAEM,SAASC,EAAcC,GAC1B,OAAIA,EAAkB,GAAN,OA1DC,kCA0DD,YAA0BA,GACnC,kDACV,CAGM,SAASC,EAAUC,GACtB,GAAKA,EAIL,OADmBA,EAAOvB,KAAI,SAAAwB,GAAK,OAAIA,EAAMC,IAAV,IACjBC,KAAK,KAC1B,CAEM,SAASC,EAAiBC,GAE7B,OADyBC,WAAWD,EAAYE,QAAQ,GAE3D,C","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/fetchApi.js"],"sourcesContent":["import styled from 'styled-components';\n\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const ReviewsItem = styled.li`\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 12px 20px 0px,\n    rgba(0, 0, 0, 0.1) 0px 2px 4px 0px,\n    rgba(255, 255, 255, 0.05) 0px 0px 0px 1px inset;\n  padding: 20px;\n  border-radius: 5px;\n`;\n\nexport const ReviewsAuthor = styled.p`\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nexport const ReviewsContent = styled.p`\n  text-align: justify;\n`;\n\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFilmReviews } from 'services/fetchApi';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  ReviewsList,\n  ReviewsItem,\n  ReviewsAuthor,\n  ReviewsContent,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getReviews = async () => {\n      try {\n        const reviews = await getFilmReviews(movieId);\n        setReviews(reviews);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoading(false);\n        console.log('Error in Reviews', error);\n      }\n    };\n    getReviews();\n  }, [movieId]);\n\n  if (!reviews) {\n    return;\n  }\n\n  return (\n    <>\n      {!isLoading && <ReviewsList>\n        {reviews.map(({ id, author, content }) => (\n          <ReviewsItem key={id}>\n            <ReviewsAuthor>Author: {author}</ReviewsAuthor>\n            <ReviewsContent>{content}</ReviewsContent>\n          </ReviewsItem>\n        ))}\n      </ReviewsList>}\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '579a7483bae7d6a5a25eb4c1ddded2cf';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getFilmById = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    const movieInfo = response.data;\n    console.log(response.data);\n    return movieInfo;\n  } catch (error) {\n    console.log('Error in getFilmById', error);\n  }\n};\n\nexport const getFilmByKeyword = async movie => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${movie}`\n    );\n    const searchMovie = response.data.results;\n    console.log('In getFilmByKeyword', response.data.results);\n    return searchMovie;\n  } catch (error) {\n    console.log('Error in getFilmByKeyword', error);\n  }\n};\n\nexport const getFilmCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    const cast = response.data.cast;\n    return cast;\n  } catch (error) {\n    console.log('Error in getFilmCast', error);\n  }\n};\n\nexport const getFilmReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.log('Error in getFilmReviews', error);\n  }\n};\n\nexport function getDate(date) {\n  if (date) {\n    const year = date.split('-')[0];\n    return year;\n  }\n}\n\nexport function getPosterFilm(posterPath) {\n    if (posterPath) return `${BASE_IMG_URL}/${posterPath}`;\n    return 'https://www.jsconsulting.kz/assets/img/noImg.jpg';\n}\n\n\nexport function getGenres(genres) {\n    if (!genres) {\n      return;\n    }\n    const genresName = genres.map(genre => genre.name);\n    return genresName.join(\", \");\n}\n\nexport function sliceVoteAverage(voteAverage) {\n    const sliceVoteAverage = parseFloat(voteAverage.toFixed(1));\n    return sliceVoteAverage;\n}\n"],"names":["ReviewsList","styled","ReviewsItem","ReviewsAuthor","ReviewsContent","useState","reviews","setReviews","movieId","useParams","isLoading","setIsLoading","useEffect","getReviews","getFilmReviews","console","log","map","id","author","content","Loader","API_KEY","axios","getFilmById","response","movieInfo","data","getFilmByKeyword","movie","searchMovie","results","getFilmCast","cast","getDate","date","split","getPosterFilm","posterPath","getGenres","genres","genre","name","join","sliceVoteAverage","voteAverage","parseFloat","toFixed"],"sourceRoot":""}